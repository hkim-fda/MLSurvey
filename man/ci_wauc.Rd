% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci.wauc.R
\name{ci_wauc}
\alias{ci_wauc}
\title{CI for weighted AUC (wAUC) by replicate weights}
\usage{
ci_wauc(
  y,
  yhat,
  tag.event = "1",
  tag.nonevent = "0",
  weights = NULL,
  cluster = NULL,
  strata = NULL,
  design = NULL,
  data = NULL,
  type = c("JK1", "JKn", "bootstrap", "subbootstrap"),
  B = 2000,
  conf.level = 0.95,
  fpc = NULL,
  fpctype = NULL,
  ...,
  compress = TRUE,
  mse = getOption("survey.replicates.mse")
)
}
\arguments{
\item{y}{A vector of response variable or a string of its name.}

\item{yhat}{A vector of predicted probabilities of \code{y} or a string of its name.}

\item{tag.event}{A character of the event of interest in \code{y}, e.g. disease, or condition.  Default is \code{"1"}.}

\item{tag.nonevent}{A character of the non-event in \code{y}, e.g. non-disease, or non-condition.  Default is \code{"0"}.}

\item{weights}{A character string of a sampling weights' identifier. \code{NULL} for either a unweighted case or the sampling design inserted in the \code{design} argument.}

\item{cluster}{A character string of a cluster identifier. It could be \code{NULL} if the sampling design were plugged in the \code{design} argument.}

\item{strata}{A character string of a strata identifier. It could be \code{NULL} if the sampling design were plugged in the \code{design} argument.}

\item{design}{An object of class \code{survey.design} generated by \code{survey::svydesign()}. It could be \code{NULL} if information about \code{cluster}, \code{strata}, \code{weights} and \code{data} were given.}

\item{data}{A data frame including vectors of \code{y}, \code{yhat}, and (or) \code{weights}.  \code{cluster},\code{strata} can be included depending on the complex sampling structure.
\code{weights = NULL} assumes equal probability generating \verb{1's}.
If \code{data=NULL}, then specific numerical vectors must be included in  \code{y}, \code{yhat}, or
the sampling design should be plugged into the argument \code{design}.}

\item{type}{Type of replicate weights.  Note: \code{JKn} for stratified, \code{JK1} for unstratified designs.}

\item{B}{The number of bootstrap replicates.  Default is 2000.}

\item{conf.level}{The width of confidence interval. Default is 0.95.}

\item{fpc, fpctype}{Passed to \code{jk1weights, jknweights, brrweights, bootweights, subbootweights}, or \code{mrbweights}.}

\item{...}{optional parameters to be passed to the low level function \code{survey::as.svrepdesign()}.}

\item{compress}{Use a compressed representation of the replicate weights matrix.}

\item{mse}{if TRUE, compute variances from sums of squares around the point estimate, rather than the mean of the replicates.}
}
\value{
confidence interval (CI) estimates
}
\description{
A function to estimate a confidence interval (CI) for wAUC implemented by \code{wROC::wauc()} with replicate weights by \code{survey::as.svrepdesign()}; \code{bootstrap} is Canty and Davison’s bootstrap,
\code{subbootstrap} is Rao and Wu’s (n − 1) bootstrap, and \code{JK1} and \code{JKn} are jackknife methods.
}
\examples{
\dontrun{
data(nhanes2013_sbc)

# For ad hoc adjustment for a single PSU stratum not to contribute to the variance
options(survey.lonely.psu='remove')

# Conveniently, update a dataset including yhat (a vector) estimated
# from any machine learning methods
data1<-data.frame(nhanes2013_sbc[,c(1,64:65)],yhat)

# For estimating bootstrap 95\\% CI for a model selected by dCV
wAUC.ci<- ci_wauc("HBP", yhat,weights="WTSAF2YR",cluster="SDMVPSU",strata="SDMVSTRA",
                 data=data1,type="subbootstrap",B=2000)
#Or equivalently,

des <- survey::svydesign(ids=~SDMVPSU, strata = ~SDMVSTRA, weights = ~WTSAF2YR,
                              nest = TRUE, data = nhanes2013_sbc)

wAUC.ci<- ci_wauc(des$variables$HBP,data1$yhat,design = des,type = "subbootstrap",B=2000)
}
}
\seealso{
\code{\link[svyROC:wauc]{svyROC::wauc()}} for detailed information on the implementation.

\code{\link[survey:as.svrepdesign]{survey::as.svrepdesign()}} for detailed information on replicate weights methods.
}
